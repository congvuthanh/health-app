---
alwaysApply: false
---

# API Integration Guide

> **📚 Full Documentation:** See `/src/api/README.md` for complete API integration guide

## Quick Reference

### Configuration

- **API Endpoint:** `https://health_app_api.dev-arent.workers.dev`
- **OpenAPI Schema:** `https://health_app_api.dev-arent.workers.dev/openapi`
- **Local Schema:** `/src/api/schemas/api.swagger.json`
- **Authentication:** JWT Bearer token (stored in localStorage)

### Tools & Stack

- **Orval** - Generates TypeScript types, React Query hooks, and MSW handlers from OpenAPI schema
- **React Query** - Data fetching, caching, and state management
- **Axios** - HTTP client with auth interceptor
- **MSW** - API mocking for tests
- **Zod** - Runtime type validation (optional)

### File Structure

```
src/
├── api/
│   ├── client.ts              # Axios client with auth
│   ├── index.ts               # Main exports
│   ├── schemas/
│   │   └── api.swagger.json   # OpenAPI schema (source)
│   └── generated/             # Auto-generated (DO NOT EDIT)
│       ├── default/
│       │   ├── default.ts     # React Query hooks
│       │   └── default.msw.ts # MSW handlers
│       └── schemas/           # TypeScript types
│
├── contexts/AuthContext/      # Authentication state
├── hooks/                     # Custom React Query hooks
│   ├── useAuthMutation.ts     # Login
│   ├── useTokenValidation.ts  # Token validation
│   ├── useAchievement.ts      # Achievement data
│   ├── useNotifications.ts    # Notifications
│   ├── useMealRecords.ts      # Meal records
│   └── useHealthRecords.ts    # Health records
│
└── utils/test/
    ├── server.ts              # MSW server setup
    └── test-utils.tsx         # Test utilities with providers
```

## Available Hooks

| Hook                   | Endpoint                    | Purpose                   |
| ---------------------- | --------------------------- | ------------------------- |
| `useAuthMutation()`    | `POST /signUp`              | Login and store token     |
| `useTokenValidation()` | `GET /validateToken`        | Validate JWT token        |
| `useAchievement()`     | `GET /myData/achievement`   | Today's achievement rate  |
| `useNotifications()`   | `GET /myData/notification`  | Notifications (paginated) |
| `useMealRecords()`     | `GET /myData/record/meals`  | Meal records (paginated)  |
| `useHealthRecords()`   | `GET /myData/record/health` | Weight/body fat records   |

> **Note:** Most hooks have `Infinite` variants (e.g., `useMealRecordsInfinite()`) for cursor-based pagination.

## Quick Start

```typescript
// 1. Login
import { useAuthMutation } from 'hooks';
const { mutate: login } = useAuthMutation();
login({ data: { password: 'your-password' } });

// 2. Fetch data
import { useAchievement } from 'hooks';
const { data, isLoading, error } = useAchievement();

// 3. Infinite scroll
import { useMealRecordsInfinite } from 'hooks';
const { data, fetchNextPage, hasNextPage } = useMealRecordsInfinite({
  limit: 8,
});
```

## Commands

```bash
pnpm generate:api     # Regenerate API code from OpenAPI schema
pnpm dev             # Start development server
pnpm test            # Run tests with MSW mocking
```

## Best Practices

1. ✅ **Use custom hooks** from `/src/hooks/` instead of generated hooks
2. ⚠️ **Never edit generated files** in `/src/api/generated/`
3. 🎯 **Handle loading/error states** in all components
4. ♾️ **Use infinite queries** for paginated data
5. 🧪 **Test with MSW** - handlers auto-generated from schema
6. 🔒 **Protected endpoints** - Token automatically injected by interceptor

## Authentication Flow

1. User logs in → `useAuthMutation()` → Token stored in `localStorage`
2. Axios interceptor adds `Authorization: Bearer {token}` to all requests
3. On 401 error → Token cleared → Redirect to `/authenticationError`

## Error Handling

- **400** - Bad request (invalid parameters)
- **401** - Unauthorized (missing/invalid/expired token) → Redirect to auth error page
- **404** - Not found (invalid cursor or resource)

## Testing

MSW server automatically intercepts API calls in tests:

```typescript
import { renderWithProviders, screen } from 'utils/test';
import { server } from 'utils/test/server';
import { http, HttpResponse } from 'msw';

test('renders achievement data', async () => {
  renderWithProviders(<AchievementCard />);
  expect(await screen.findByText(/75%/i)).toBeInTheDocument();
});

test('handles API error', async () => {
  server.use(
    http.get('/myData/achievement', () => {
      return new HttpResponse(null, { status: 500 });
    })
  );

  renderWithProviders(<AchievementCard />);
  expect(await screen.findByText(/error/i)).toBeInTheDocument();
});
```

---

**📚 For detailed documentation, examples, and advanced patterns, see `/src/api/README.md`**
