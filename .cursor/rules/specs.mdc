---
alwaysApply: true
---

_The web application "Health-App"_

**Description**

- The following pages are to be implemented in this application:
  - Top page (login page) ・・・ URL path: /. See top-page-specs.mdc
  - My Page ・・・ URL path: /myPage. See my-page-specs.mdc
  - Authentication Failure Display ・・・ /authenticationError. See authenticate-failed-page-specs.mdc
  - Not Found ・・・ URL path: other than the above. See not-found-page-specs.mdc
- Use the data from the API of the following URL for the data of this application (values of graphs, dates of records, images of meals, etc.).
  - API endpoint: https://health_app_api.dev-arent.workers.dev
  - The schema of the API is described in OpenAPI format at the following URL. Please check here: https://health_app_api.dev-arent.workers.dev/openapi
- Use [React Router v7 - latest](https://reactrouter.com/start/data/installation) for routing.
- Use [React Query](https://tanstack.com/query/latest/docs/framework/react/installation) for data fetching
- Use TypeScript as the application development language.
- **Follow the project structure defined in README.md:**

  ```
  src/
  ├── api/                  # API layer (client.ts, endpoints.ts, types.ts)
  ├── assets/               # Static assets (SVG icons, images)
  │   ├── icons/
  │   └── images/
  ├── components/           # Reusable components
  │   ├── common/           # Generic shared components
  │   ├── layout/           # Layout components (Header/, Footer/, Layout/)
  │   │   └── [Component]/
  │   │       ├── index.tsx
  │   │       ├── index.styles.ts (optional)
  │   │       └── index.test.tsx
  │   └── features/         # Feature-specific components
  ├── hooks/                # Custom hooks (useAuth, useAchievement, etc.)
  ├── pages/                # Page components
  │   └── [PageName]/
  │       ├── index.tsx
  │       ├── index.styles.ts (optional)
  │       └── index.test.tsx
  ├── routes/               # Routing configuration
  ├── services/             # Business logic layer
  ├── store/                # State management
  ├── styles/               # Global styles, theme, and type definitions
  ├── types/                # TypeScript type definitions
  └── utils/                # Utility functions
  ```

  - **IMPORTANT**: Always place files in their correct directory according to this structure
  - Each component should have its own folder with `index.tsx`, optional `index.styles.ts`(if have style, it should be required), and `index.test.tsx`
  - Keep components organized by their purpose (common, layout, features)
  - Hooks should be named with `use` prefix (e.g., `useAuth.ts`)

- Use [styled-components](https://styled-components.com/) for styling
  - **IMPORTANT: ALL styling MUST use the theme system defined in `src/styles/theme.ts`**
  - **Always reference `theme.colors`, `theme.fonts`, `theme.typography`, and `theme.breakpoints`** in your styled-components
  - **Never hardcode colors, fonts, typography, or breakpoints** - always use theme values
  - **Always use `rem` units instead of `px`** for all sizing values (fonts, spacing, dimensions, etc.)
  - Base font size is set to 62.5% (10px base), so **1rem = 10px**
  - Easy conversion: divide px by 10 (e.g., 24px = 2.4rem, 16px = 1.6rem, 48px = 4.8rem)
  - Use the `pxToRem()` utility function from `src/utils/pxToRem.ts` for conversions if needed
  - **Theme System (`src/styles/theme.ts`):**
    - **Colors:** Use `theme.colors` for all color values (primary, secondary, black variants, white, gradient)
    - **Fonts:** Use `theme.fonts.japanese` for Japanese text and `theme.fonts.alphanumeric` for alphanumeric text
    - **Typography:** Use `theme.typography` for all text styles (h1-h5, p1-p7) with regular/bold variants
    - **Breakpoints:** Use `theme.breakpoints` for responsive design (mobile: 415px, tablet: 1024px, desktop: 1440px)
- Implement Linter and Formatter packages to enforce consistency in coding style.
  - Linter: ESLint
  - Formatter: Prettier
- Write test code so that coverage can be measured.
  - Testing framework: Vitest
  - Expect coverage percentage is 80% and above
  - Should have unit test for utils functions, custom hooks, components.
  - Should have integration tests for pages.

**Important**

- Make sure to follow README.md during development
- This App has an authentication (login) function. Please refer to the Functional-Requirements(has defined on Cursor rules) and OpenAPI schema for the specifications of the authentication function.
- This App is available in both PC and Mobile sizes. Ensure that your implementation is responsive. However, the layout of the responsive design is up to you. As long as you follow the points below, the responsive design itself will not affect your results.
  - **Breakpoints (defined in `src/styles/theme.ts`):**
    - **ALWAYS use `theme.breakpoints` for media queries**
    - Mobile: `theme.breakpoints.mobile` (415px)
    - Tablet: `theme.breakpoints.tablet` (1024px)
    - Desktop: `theme.breakpoints.desktop` (1440px)
    - You can add additional breakpoints if needed to improve UX and prevent UI issues
  - Elements do not fall out of columns.
  - The width of the screen does not overflow (no horizontal scrolling or element clipping occurs).
  - Even on a Mobile-size screen, visibility of text and operability of the UI can be ensured as in a general web application.
- Use the following image data format:
  - svg for assets stored in project directory /assets
  - url if we map it from API responses
- **Fonts (defined in `src/styles/theme.ts`):**
  - **ALWAYS use `theme.fonts` for font-family declarations**
  - Japanese text: Use `theme.fonts.japanese` → Noto Sans JP Regular(400) and Bold(700): https://fonts.google.com/noto/specimen/Noto+Sans+JP
  - Alphanumeric text: Use `theme.fonts.alphanumeric` → Inter Regular(400) and Bold(700): https://fonts.google.com/specimen/Inter
  - **Typography styles:** Use `theme.typography` (h1-h5, p1-p7) for consistent text styling across the application
