/**
 * Generated by orval v7.13.1 🍺
 * Do not edit manually.
 * Health App API
 * REST API for "Arent Health App". Provides data for authenticated users.
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  GetMyDataAchievement200,
  GetMyDataNotification200,
  GetMyDataNotificationParams,
  GetMyDataRecordHealth200,
  GetMyDataRecordHealthParams,
  GetMyDataRecordMeals200,
  GetMyDataRecordMealsParams,
  GetValidateToken200,
  PostSignUp200,
  PostSignUpBody,
} from '.././schemas';

import { apiClient } from '../../client';

/**
 * Authenticate user and issue access token upon successful authentication.
 */
export const postSignUp = (
  postSignUpBody: PostSignUpBody,
  signal?: AbortSignal
) => {
  return apiClient<PostSignUp200>({
    url: `/signUp`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postSignUpBody,
    signal,
  });
};

export const getPostSignUpMutationOptions = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSignUp>>,
    TError,
    { data: PostSignUpBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSignUp>>,
  TError,
  { data: PostSignUpBody },
  TContext
> => {
  const mutationKey = ['postSignUp'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSignUp>>,
    { data: PostSignUpBody }
  > = (props) => {
    const { data } = props ?? {};

    return postSignUp(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSignUp>>
>;
export type PostSignUpMutationBody = PostSignUpBody;
export type PostSignUpMutationError = ErrorResponse | ErrorResponse;

export const usePostSignUp = <
  TError = ErrorResponse | ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postSignUp>>,
      TError,
      { data: PostSignUpBody },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof postSignUp>>,
  TError,
  { data: PostSignUpBody },
  TContext
> => {
  const mutationOptions = getPostSignUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Check the authentication status of the current token.
 */
export const getValidateToken = (signal?: AbortSignal) => {
  return apiClient<GetValidateToken200>({
    url: `/validateToken`,
    method: 'GET',
    signal,
  });
};

export const getGetValidateTokenInfiniteQueryKey = () => {
  return ['infinate', `/validateToken`] as const;
};

export const getGetValidateTokenQueryKey = () => {
  return [`/validateToken`] as const;
};

export const getGetValidateTokenInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getValidateToken>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getValidateToken>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetValidateTokenInfiniteQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getValidateToken>>
  > = ({ signal }) => getValidateToken(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getValidateToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetValidateTokenInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getValidateToken>>
>;
export type GetValidateTokenInfiniteQueryError = ErrorResponse;

export function useGetValidateTokenInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getValidateToken>>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getValidateToken>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getValidateToken>>,
          TError,
          Awaited<ReturnType<typeof getValidateToken>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetValidateTokenInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getValidateToken>>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getValidateToken>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getValidateToken>>,
          TError,
          Awaited<ReturnType<typeof getValidateToken>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetValidateTokenInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getValidateToken>>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getValidateToken>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetValidateTokenInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getValidateToken>>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getValidateToken>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetValidateTokenInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetValidateTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof getValidateToken>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getValidateToken>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetValidateTokenQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getValidateToken>>
  > = ({ signal }) => getValidateToken(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getValidateToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetValidateTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof getValidateToken>>
>;
export type GetValidateTokenQueryError = ErrorResponse;

export function useGetValidateToken<
  TData = Awaited<ReturnType<typeof getValidateToken>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getValidateToken>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getValidateToken>>,
          TError,
          Awaited<ReturnType<typeof getValidateToken>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetValidateToken<
  TData = Awaited<ReturnType<typeof getValidateToken>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getValidateToken>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getValidateToken>>,
          TError,
          Awaited<ReturnType<typeof getValidateToken>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetValidateToken<
  TData = Awaited<ReturnType<typeof getValidateToken>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getValidateToken>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetValidateToken<
  TData = Awaited<ReturnType<typeof getValidateToken>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getValidateToken>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetValidateTokenQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get notification data.
 */
export const getMyDataNotification = (
  params?: GetMyDataNotificationParams,
  signal?: AbortSignal
) => {
  return apiClient<GetMyDataNotification200>({
    url: `/myData/notification`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetMyDataNotificationInfiniteQueryKey = (
  params?: GetMyDataNotificationParams
) => {
  return [
    'infinate',
    `/myData/notification`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetMyDataNotificationQueryKey = (
  params?: GetMyDataNotificationParams
) => {
  return [`/myData/notification`, ...(params ? [params] : [])] as const;
};

export const getGetMyDataNotificationInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataNotification>>,
    GetMyDataNotificationParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataNotificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData,
        QueryKey,
        GetMyDataNotificationParams['after']
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMyDataNotificationInfiniteQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyDataNotification>>,
    QueryKey,
    GetMyDataNotificationParams['after']
  > = ({ signal, pageParam }) =>
    getMyDataNotification(
      { ...params, after: pageParam || params?.['after'] },
      signal
    );

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getMyDataNotification>>,
    TError,
    TData,
    QueryKey,
    GetMyDataNotificationParams['after']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyDataNotificationInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyDataNotification>>
>;
export type GetMyDataNotificationInfiniteQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

export function useGetMyDataNotificationInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataNotification>>,
    GetMyDataNotificationParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params: undefined | GetMyDataNotificationParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData,
        QueryKey,
        GetMyDataNotificationParams['after']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataNotification>>,
          TError,
          Awaited<ReturnType<typeof getMyDataNotification>>,
          QueryKey
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataNotificationInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataNotification>>,
    GetMyDataNotificationParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataNotificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData,
        QueryKey,
        GetMyDataNotificationParams['after']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataNotification>>,
          TError,
          Awaited<ReturnType<typeof getMyDataNotification>>,
          QueryKey
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataNotificationInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataNotification>>,
    GetMyDataNotificationParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataNotificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData,
        QueryKey,
        GetMyDataNotificationParams['after']
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyDataNotificationInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataNotification>>,
    GetMyDataNotificationParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataNotificationParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData,
        QueryKey,
        GetMyDataNotificationParams['after']
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyDataNotificationInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetMyDataNotificationQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyDataNotification>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataNotificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMyDataNotificationQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyDataNotification>>
  > = ({ signal }) => getMyDataNotification(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyDataNotification>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyDataNotificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyDataNotification>>
>;
export type GetMyDataNotificationQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

export function useGetMyDataNotification<
  TData = Awaited<ReturnType<typeof getMyDataNotification>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params: undefined | GetMyDataNotificationParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataNotification>>,
          TError,
          Awaited<ReturnType<typeof getMyDataNotification>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataNotification<
  TData = Awaited<ReturnType<typeof getMyDataNotification>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataNotificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataNotification>>,
          TError,
          Awaited<ReturnType<typeof getMyDataNotification>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataNotification<
  TData = Awaited<ReturnType<typeof getMyDataNotification>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataNotificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyDataNotification<
  TData = Awaited<ReturnType<typeof getMyDataNotification>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataNotificationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataNotification>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyDataNotificationQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get the "Today's Achievement Rate (本日の達成率)" data.
 */
export const getMyDataAchievement = (signal?: AbortSignal) => {
  return apiClient<GetMyDataAchievement200>({
    url: `/myData/achievement`,
    method: 'GET',
    signal,
  });
};

export const getGetMyDataAchievementInfiniteQueryKey = () => {
  return ['infinate', `/myData/achievement`] as const;
};

export const getGetMyDataAchievementQueryKey = () => {
  return [`/myData/achievement`] as const;
};

export const getGetMyDataAchievementInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getMyDataAchievement>>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getMyDataAchievement>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMyDataAchievementInfiniteQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyDataAchievement>>
  > = ({ signal }) => getMyDataAchievement(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getMyDataAchievement>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyDataAchievementInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyDataAchievement>>
>;
export type GetMyDataAchievementInfiniteQueryError = ErrorResponse;

export function useGetMyDataAchievementInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getMyDataAchievement>>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataAchievement>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataAchievement>>,
          TError,
          Awaited<ReturnType<typeof getMyDataAchievement>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataAchievementInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getMyDataAchievement>>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataAchievement>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataAchievement>>,
          TError,
          Awaited<ReturnType<typeof getMyDataAchievement>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataAchievementInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getMyDataAchievement>>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataAchievement>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyDataAchievementInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getMyDataAchievement>>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataAchievement>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyDataAchievementInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetMyDataAchievementQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyDataAchievement>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getMyDataAchievement>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMyDataAchievementQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyDataAchievement>>
  > = ({ signal }) => getMyDataAchievement(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyDataAchievement>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyDataAchievementQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyDataAchievement>>
>;
export type GetMyDataAchievementQueryError = ErrorResponse;

export function useGetMyDataAchievement<
  TData = Awaited<ReturnType<typeof getMyDataAchievement>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataAchievement>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataAchievement>>,
          TError,
          Awaited<ReturnType<typeof getMyDataAchievement>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataAchievement<
  TData = Awaited<ReturnType<typeof getMyDataAchievement>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataAchievement>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataAchievement>>,
          TError,
          Awaited<ReturnType<typeof getMyDataAchievement>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataAchievement<
  TData = Awaited<ReturnType<typeof getMyDataAchievement>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataAchievement>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyDataAchievement<
  TData = Awaited<ReturnType<typeof getMyDataAchievement>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataAchievement>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyDataAchievementQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get "Meal Record List(食事の記録)" data. Supports Cursor Pagination and allows pagination control through query parameters.
 */
export const getMyDataRecordMeals = (
  params?: GetMyDataRecordMealsParams,
  signal?: AbortSignal
) => {
  return apiClient<GetMyDataRecordMeals200>({
    url: `/myData/record/meals`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetMyDataRecordMealsInfiniteQueryKey = (
  params?: GetMyDataRecordMealsParams
) => {
  return [
    'infinate',
    `/myData/record/meals`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetMyDataRecordMealsQueryKey = (
  params?: GetMyDataRecordMealsParams
) => {
  return [`/myData/record/meals`, ...(params ? [params] : [])] as const;
};

export const getGetMyDataRecordMealsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>,
    GetMyDataRecordMealsParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordMealsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordMealsParams['after']
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMyDataRecordMealsInfiniteQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>,
    QueryKey,
    GetMyDataRecordMealsParams['after']
  > = ({ signal, pageParam }) =>
    getMyDataRecordMeals(
      { ...params, after: pageParam || params?.['after'] },
      signal
    );

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>,
    TError,
    TData,
    QueryKey,
    GetMyDataRecordMealsParams['after']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyDataRecordMealsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyDataRecordMeals>>
>;
export type GetMyDataRecordMealsInfiniteQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

export function useGetMyDataRecordMealsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>,
    GetMyDataRecordMealsParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params: undefined | GetMyDataRecordMealsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordMealsParams['after']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataRecordMeals>>,
          TError,
          Awaited<ReturnType<typeof getMyDataRecordMeals>>,
          QueryKey
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataRecordMealsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>,
    GetMyDataRecordMealsParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordMealsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordMealsParams['after']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataRecordMeals>>,
          TError,
          Awaited<ReturnType<typeof getMyDataRecordMeals>>,
          QueryKey
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataRecordMealsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>,
    GetMyDataRecordMealsParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordMealsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordMealsParams['after']
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyDataRecordMealsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>,
    GetMyDataRecordMealsParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordMealsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordMealsParams['after']
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyDataRecordMealsInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetMyDataRecordMealsQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyDataRecordMeals>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordMealsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMyDataRecordMealsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>
  > = ({ signal }) => getMyDataRecordMeals(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyDataRecordMeals>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyDataRecordMealsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyDataRecordMeals>>
>;
export type GetMyDataRecordMealsQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

export function useGetMyDataRecordMeals<
  TData = Awaited<ReturnType<typeof getMyDataRecordMeals>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params: undefined | GetMyDataRecordMealsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataRecordMeals>>,
          TError,
          Awaited<ReturnType<typeof getMyDataRecordMeals>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataRecordMeals<
  TData = Awaited<ReturnType<typeof getMyDataRecordMeals>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordMealsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataRecordMeals>>,
          TError,
          Awaited<ReturnType<typeof getMyDataRecordMeals>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataRecordMeals<
  TData = Awaited<ReturnType<typeof getMyDataRecordMeals>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordMealsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyDataRecordMeals<
  TData = Awaited<ReturnType<typeof getMyDataRecordMeals>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordMealsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordMeals>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyDataRecordMealsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get "Weight & Body Fat Record (体重・体脂肪率の記録)" data. You can get data within the specified range by day, week, month, or year.
 */
export const getMyDataRecordHealth = (
  params?: GetMyDataRecordHealthParams,
  signal?: AbortSignal
) => {
  return apiClient<GetMyDataRecordHealth200>({
    url: `/myData/record/health`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetMyDataRecordHealthInfiniteQueryKey = (
  params?: GetMyDataRecordHealthParams
) => {
  return [
    'infinate',
    `/myData/record/health`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetMyDataRecordHealthQueryKey = (
  params?: GetMyDataRecordHealthParams
) => {
  return [`/myData/record/health`, ...(params ? [params] : [])] as const;
};

export const getGetMyDataRecordHealthInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>,
    GetMyDataRecordHealthParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordHealthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordHealthParams['after']
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMyDataRecordHealthInfiniteQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>,
    QueryKey,
    GetMyDataRecordHealthParams['after']
  > = ({ signal, pageParam }) =>
    getMyDataRecordHealth(
      { ...params, after: pageParam || params?.['after'] },
      signal
    );

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>,
    TError,
    TData,
    QueryKey,
    GetMyDataRecordHealthParams['after']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyDataRecordHealthInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyDataRecordHealth>>
>;
export type GetMyDataRecordHealthInfiniteQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

export function useGetMyDataRecordHealthInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>,
    GetMyDataRecordHealthParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params: undefined | GetMyDataRecordHealthParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordHealthParams['after']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataRecordHealth>>,
          TError,
          Awaited<ReturnType<typeof getMyDataRecordHealth>>,
          QueryKey
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataRecordHealthInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>,
    GetMyDataRecordHealthParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordHealthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordHealthParams['after']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataRecordHealth>>,
          TError,
          Awaited<ReturnType<typeof getMyDataRecordHealth>>,
          QueryKey
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataRecordHealthInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>,
    GetMyDataRecordHealthParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordHealthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordHealthParams['after']
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyDataRecordHealthInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>,
    GetMyDataRecordHealthParams['after']
  >,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordHealthParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData,
        QueryKey,
        GetMyDataRecordHealthParams['after']
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyDataRecordHealthInfiniteQueryOptions(
    params,
    options
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetMyDataRecordHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyDataRecordHealth>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordHealthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMyDataRecordHealthQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>
  > = ({ signal }) => getMyDataRecordHealth(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 300000,
    gcTime: 600000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyDataRecordHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyDataRecordHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyDataRecordHealth>>
>;
export type GetMyDataRecordHealthQueryError =
  | ErrorResponse
  | ErrorResponse
  | ErrorResponse;

export function useGetMyDataRecordHealth<
  TData = Awaited<ReturnType<typeof getMyDataRecordHealth>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params: undefined | GetMyDataRecordHealthParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataRecordHealth>>,
          TError,
          Awaited<ReturnType<typeof getMyDataRecordHealth>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataRecordHealth<
  TData = Awaited<ReturnType<typeof getMyDataRecordHealth>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordHealthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyDataRecordHealth>>,
          TError,
          Awaited<ReturnType<typeof getMyDataRecordHealth>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyDataRecordHealth<
  TData = Awaited<ReturnType<typeof getMyDataRecordHealth>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordHealthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMyDataRecordHealth<
  TData = Awaited<ReturnType<typeof getMyDataRecordHealth>>,
  TError = ErrorResponse | ErrorResponse | ErrorResponse,
>(
  params?: GetMyDataRecordHealthParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyDataRecordHealth>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyDataRecordHealthQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
