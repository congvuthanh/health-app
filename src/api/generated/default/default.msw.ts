/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * Health App API
 * REST API for "Arent Health App". Provides data for authenticated users.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';
import type { RequestHandlerOptions } from 'msw';

import type {
  GetMyDataAchievement200,
  GetMyDataNotification200,
  GetMyDataRecordHealth200,
  GetMyDataRecordMeals200,
  GetValidateToken200,
  PostSignUp200,
} from '.././schemas';

export const getPostSignUpResponseMock = (
  overrideResponse: Partial<PostSignUp200> = {}
): PostSignUp200 => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
    tokenType: faker.string.alpha({ length: { min: 10, max: 20 } }),
    expiresIn: faker.number.int({ min: undefined, max: undefined }),
  },
  ...overrideResponse,
});

export const getGetValidateTokenResponseMock = (
  overrideResponse: Partial<GetValidateToken200> = {}
): GetValidateToken200 => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    isAuthenticated: faker.datatype.boolean(),
    tokenInfo: {
      issuedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      expiresAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    },
  },
  ...overrideResponse,
});

export const getGetMyDataNotificationResponseMock = (
  overrideResponse: Partial<GetMyDataNotification200> = {}
): GetMyDataNotification200 => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    items: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      title: faker.string.alpha({ length: { min: 10, max: 20 } }),
      message: faker.string.alpha({ length: { min: 10, max: 20 } }),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      isRead: faker.datatype.boolean(),
    })),
    pageInfo: {
      hasNextPage: faker.datatype.boolean(),
      hasPreviousPage: faker.datatype.boolean(),
      startCursor: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      endCursor: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      limit: faker.number.int({ min: undefined, max: undefined }),
    },
    totalCount: faker.number.int({ min: 0, max: undefined }),
    unreadNotificationCount: faker.number.int({ min: 0, max: undefined }),
  },
  ...overrideResponse,
});

export const getGetMyDataAchievementResponseMock = (
  overrideResponse: Partial<GetMyDataAchievement200> = {}
): GetMyDataAchievement200 => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    date: `${faker.date.past().toISOString().split('.')[0]}Z`,
    imageUrl: faker.internet.url(),
    altText: faker.string.alpha({ length: { min: 10, max: 20 } }),
    achievementRate: faker.number.float({
      min: 0,
      max: 100,
      fractionDigits: 2,
    }),
  },
  ...overrideResponse,
});

export const getGetMyDataRecordMealsResponseMock = (
  overrideResponse: Partial<GetMyDataRecordMeals200> = {}
): GetMyDataRecordMeals200 => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    items: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      type: faker.helpers.arrayElement([
        'Breakfast',
        'Lunch',
        'Dinner',
        'Snack',
      ] as const),
      imageUrl: faker.internet.url(),
      altText: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    pageInfo: {
      hasNextPage: faker.datatype.boolean(),
      hasPreviousPage: faker.datatype.boolean(),
      startCursor: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      endCursor: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      limit: faker.number.int({ min: undefined, max: undefined }),
    },
    totalCount: faker.number.int({ min: 0, max: undefined }),
  },
  ...overrideResponse,
});

export const getGetMyDataRecordHealthResponseMock = (
  overrideResponse: Partial<GetMyDataRecordHealth200> = {}
): GetMyDataRecordHealth200 => ({
  status: faker.string.alpha({ length: { min: 10, max: 20 } }),
  code: faker.number.int({ min: undefined, max: undefined }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    duration: faker.helpers.arrayElement([
      'day',
      'week',
      'month',
      'year',
    ] as const),
    items: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      date: `${faker.date.past().toISOString().split('.')[0]}Z`,
      weight: faker.number.float({ min: 0, max: undefined, fractionDigits: 2 }),
      fatRate: faker.number.float({ min: 0, max: 100, fractionDigits: 2 }),
    })),
  },
  ...overrideResponse,
});

export const getPostSignUpMockHandler = (
  overrideResponse?:
    | PostSignUp200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<PostSignUp200> | PostSignUp200),
  options?: RequestHandlerOptions
) => {
  return http.post(
    '*/signUp',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getPostSignUpResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getGetValidateTokenMockHandler = (
  overrideResponse?:
    | GetValidateToken200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetValidateToken200> | GetValidateToken200),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/validateToken',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetValidateTokenResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getGetMyDataNotificationMockHandler = (
  overrideResponse?:
    | GetMyDataNotification200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetMyDataNotification200> | GetMyDataNotification200),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/myData/notification',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyDataNotificationResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getGetMyDataAchievementMockHandler = (
  overrideResponse?:
    | GetMyDataAchievement200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetMyDataAchievement200> | GetMyDataAchievement200),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/myData/achievement',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyDataAchievementResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getGetMyDataRecordMealsMockHandler = (
  overrideResponse?:
    | GetMyDataRecordMeals200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetMyDataRecordMeals200> | GetMyDataRecordMeals200),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/myData/record/meals',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyDataRecordMealsResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};

export const getGetMyDataRecordHealthMockHandler = (
  overrideResponse?:
    | GetMyDataRecordHealth200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetMyDataRecordHealth200> | GetMyDataRecordHealth200),
  options?: RequestHandlerOptions
) => {
  return http.get(
    '*/myData/record/health',
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyDataRecordHealthResponseMock()
        ),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    },
    options
  );
};
export const getDefaultMock = () => [
  getPostSignUpMockHandler(),
  getGetValidateTokenMockHandler(),
  getGetMyDataNotificationMockHandler(),
  getGetMyDataAchievementMockHandler(),
  getGetMyDataRecordMealsMockHandler(),
  getGetMyDataRecordHealthMockHandler(),
];
